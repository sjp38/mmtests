#!/bin/bash
# This script whatevers vmscale
P=vmscale-bench
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/vmscale-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/vmscale-${VERSION}-installed ]; then
	$SHELLPACK_INCLUDE/shellpack-install-vmscale -v ${VERSION}  || die vmscale install script returned error
fi
cd $SHELLPACK_SOURCES/vmscale-${VERSION}-installed || die Failed to cd to vmscale install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo vmscale installed only as requested.
	exit $SHELLPACK_SUCCESS
fi

# Include monitor hooks
. $SHELLPACK_INCLUDE/include-monitor.sh

cd $SHELLPACK_SOURCES/vmscale-${VERSION}-installed || die Failed to cd to vmscale directory

install-depends coreutils

TIME_CMD=`which time`
if [ "$TIME_CMD" = "" ]; then
	TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
	TIME_CMD="time"
fi

echo -n > $LOGDIR_RESULTS/cases
for CASE in lru-file-readonce lru-file-readtwice lru-file-ddspread; do

	# Prepare for compatability with how vmscale works without using the
	# run script as it does more setup than mmtests needs to deal with
	rm -rf /tmp/vm-scalability
	rm -rf $SHELLPACK_TEMP/*
	ln -s $SHELLPACK_TEMP /tmp/vm-scalability

	echo $CASE | tee -a $LOGDIR_RESULTS/cases
	monitor_pre_hook  $LOGDIR_RESULTS $CASE
	$TIME_CMD "./case-$CASE" 2>$LOGDIR_RESULTS/$CASE.time | tee $LOGDIR_RESULTS/$CASE.log
	monitor_post_hook $LOGDIR_RESULTS $CASE
done

exit $SHELLPACK_SUCCESS
#### Description vm scalability test suite
#### Details vmscale-bench 19
