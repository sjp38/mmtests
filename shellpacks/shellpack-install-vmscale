#!/bin/bash
# vmscale installer
P=vmscale-install
DEFAULT_VERSION=1
. $SHELLPACK_INCLUDE/common.sh
GIT_LOCATION=https://github.com/aristeu/vm-scalability
MIRROR_LOCATION="$WEBROOT/vmscale"

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

# Unconditionally fetch the tar to find out the real version number
TARFILE=vmscale-${VERSION}.tar.gz
git_fetch $GIT_LOCATION vmscale-${VERSION}-installed $MIRROR_LOCATION/$TARFILE $SHELLPACK_SOURCES/$TARFILE
cd $SHELLPACK_SOURCES
tar -xf $TARFILE
if [ $? -ne 0 ]; then
        error "$P: tar xf vmscale-${VERSION}.tar.gz failed"
        popd > /dev/null
        exit $SHELLPACK_ERROR
fi

# Rename directory to something we expect.
DST_DIR=`tar tf $TARFILE | head -n 1 | awk -F / '{print $1}'`
mv $DST_DIR vmscale-${VERSION}-installed
pushd vmscale-${VERSION}-installed > /dev/null || die Failed to rename tar
pushd $SHELLPACK_SOURCES/vmscale-${VERSION}-installed || die Failed to change to source directory

TEMPFILE=`mktemp`
LINECOUNT=`wc -l $0 | awk '{print $1}'`
CSTART=`grep -n "BEGIN PATCH FILE" $0 | tail -1 | awk -F : '{print $1}'`
tail -$(($LINECOUNT-$CSTART)) $0 | grep -v "^###" > $TEMPFILE.patch

cat $TEMPFILE.patch | patch -p1
RETVAL=$?
rm $TEMPFILE $TEMPFILE.patch
if [ $RETVAL -ne 0 ]; then
	exit $SHELLPACK_ERROR
fi
for NEWCASE in "case-lru-file-ddspread"; do
	chmod a+x $NEWCASE
done

echo vmscale installed successfully
exit $SHELLPACK_SUCCESS

==== BEGIN PATCH FILE ====
diff --git a/case-lru-file-ddspread b/case-lru-file-ddspread
new file mode 100644
index 0000000..faff47c
--- /dev/null
+++ b/case-lru-file-ddspread
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+# measure spread of dd performance
+
+source ./hw_vars
+
+for i in `seq 1 $nr_cpu`; do
+	create_sparse_file $SPARSE_FILE-$i $((10 * mem / nr_cpu))
+	timeout --foreground -s INT 1800 dd bs=4k if=$SPARSE_FILE-$i of=/dev/null 2>&1
+done
+
+wait
+
+rm `seq -f $SPARSE_FILE-%g 1 $nr_cpu`
diff --git a/case-lru-file-readonce b/case-lru-file-readonce
index 5a3cabd..19f4539 100755
--- a/case-lru-file-readonce
+++ b/case-lru-file-readonce
@@ -11,9 +11,11 @@ source ./hw_vars
 for i in `seq 1 $nr_cpu`
 do
 	create_sparse_file $SPARSE_FILE-$i $((10 * mem / nr_cpu))
-	cp $SPARSE_FILE-$i /dev/null &
+	$TIME_CMD -o /tmp/vmscale-$$-$i cp $SPARSE_FILE-$i /dev/null 2>&1 &
 done
 
 wait
+cat /tmp/vmscale-$$-*
+rm /tmp/vmscale-$$-*
 
 rm `seq -f $SPARSE_FILE-%g 1 $nr_cpu`
diff --git a/case-lru-file-readtwice b/case-lru-file-readtwice
index 3e2f9f0..853d004 100755
--- a/case-lru-file-readtwice
+++ b/case-lru-file-readtwice
@@ -18,10 +18,13 @@ source ./hw_vars
 for i in `seq 1 $nr_cpu`
 do
 	create_sparse_file $SPARSE_FILE-$i $((10 * mem / nr_cpu))
-	cp $SPARSE_FILE-$i /dev/null &
-	cp $SPARSE_FILE-$i /dev/null &
+	$TIME_CMD -o /tmp/vmscale-$$-$i-1 cp $SPARSE_FILE-$i /dev/null 2>&1 &
+	$TIME_CMD -o /tmp/vmscale-$$-$i-2 cp $SPARSE_FILE-$i /dev/null 2>&1 &
 done
 
 wait
 
+cat /tmp/vmscale-$$-*
+rm /tmp/vmscale-$$-*
+
 rm `seq -f $SPARSE_FILE-%g 1 $nr_cpu`
diff --git a/hw_vars b/hw_vars
index 758d32c..138bf84 100755
--- a/hw_vars
+++ b/hw_vars
@@ -12,6 +12,11 @@ SPARSE_FILE=$SPARSE_ROOT/sparse-${0/.*case-/}
 
 PIDFILE=$SPARSE_ROOT/${0/.*case-/}.pid
 
+TIME_CMD=`which time`
+if [ "$TIME_CMD" = "" ]; then
+	TIMEFORMAT="%2Uuser %2Ssystem %Relapsed %P%%CPU"
+	TIME_CMD="time"
+fi
 
 # sparse files won't work as expected on tmpfs/nfs
 create_sparse_root () {
#### Description vm scalability test suite
#### Details vmscale 19
