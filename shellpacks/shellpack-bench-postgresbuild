#!/bin/bash
# This script installs postgres and leaves it ready for benchmarking
P=postgresbuild-bench
DEFAULT_VERSION=9.3.4
. $SHELLPACK_INCLUDE/common.sh
POSTGRES_USER=nobody
POSTGRES_GROUP=nogroup

# Basic argument parser
TASKSET_SERVER=
TASKSET_CLIENT=

while [ "$1" != "" ]; do
	case "$1" in
	-v)
		VERSION=$2
		shift 2
		;;
	--install-only)
		INSTALL_ONLY=yes
		shift
		;;
	--install-force)
		INSTALL_FORCE=yes
		shift
		;;
	--postgres-user)
		POSTGRES_USER=$2
		shift 2
		;;
	--use-hugetlbfs)
		USE_HUGETLBFS=$2
		shift 2
		;;
	--effective_cachesize)
		EFFECTIVE_CACHESIZE=$2
		shift 2
		;;
	--shared_buffers)
		SHARED_BUFFERS=$2
		shift 2
		;;
	--work_mem)
		WORK_MEM=$2
		shift 2
		;;
	--start)
		SERVER_START=yes
		shift
		;;
	--stop)
		SERVER_STOP=yes
		shift
		;;
	*)
		echo Unrecognised option: $1
		shift
	esac
done
if [ "$TASKSET_SERVER" != "" ]; then
	echo TASKSET_SERVER: $TASKSET_SERVER
	echo TASKSET_CLIENT: $TASKSET_CLIENT
fi
if [ -z "$VERSION" ]; then
	VERSION=$DEFAULT_VERSION
fi

if [ "$INSTALL_FORCE" = "yes" ]; then
	rm -rf $SHELLPACK_SOURCES/postgresbuild-${VERSION}
fi
if [ ! -d $SHELLPACK_SOURCES/postgresbuild-${VERSION}-installed ]; then
	$SHELLPACK_INCLUDE/shellpack-install-postgresbuild -v ${VERSION}  || die postgresbuild install script returned error
fi
cd $SHELLPACK_SOURCES/postgresbuild-${VERSION}-installed || die Failed to cd to postgresbuild install directory
if [ "$INSTALL_ONLY" = "yes" ]; then
	echo postgresbuild installed only as requested.
	exit $SHELLPACK_SUCCESS
fi
. $SHELLPACK_INCLUDE/include-libhugetlbfs.sh
. $SHELLPACK_INCLUDE/include-hugepage.sh
getpagesize
PSQL="su -s /bin/bash $POSTGRES_USER -c"
POSTGRES_DATADIR=$SHELLPACK_SOURCES/postgresbuild-${VERSION}-installed/data
POSTGRES_PIDFILE=$POSTGRES_DATADIR/postmaster.pid
POSTGRES_PID=`cat $POSTGRES_PIDFILE 2>&1`
cd $SHELLPACK_SOURCES/postgresbuild-${VERSION}-installed

# Only updates the first occurance of the parameter
update_entry_cnf() {
	PARAMETER=$1
	VALUE=$2
	CONF=$SHELLPACK_SOURCES/postgresbuild-${VERSION}-installed/data/postgresql.conf

	LINE=`grep -n "^$PARAMETER" $CONF | cut -d: -f1 | head -1`
	if [ "$LINE" = "" ]; then
		LINE=`grep -n "^#$PARAMETER" $CONF | cut -d: -f1 | head -1`
		if [ "$LINE" = "" ]; then
			die Failed to locate parameter $PARAMETER
		fi
	fi
	LINEC=`wc -l $CONF | awk '{print $1}'`
	head -$(($LINE-1)) $CONF > ${CONF}.tmp
	echo $PARAMETER = $VALUE >> ${CONF}.tmp
	tail -$(($LINEC-$LINE)) $CONF >> ${CONF}.tmp

	mv ${CONF}.tmp $CONF
}

postgres_shutdown() {
	if [ -e $POSTGRES_PIDFILE ]; then
		echo Shutting down server
		$PSQL "bin/pg_ctl -D $POSTGRES_DATADIR -l logfile stop"
		sleep 2
		wait_on_pid_exit $POSTGRES_PID
		rm $POSTGRES_PIDFILE 2>/dev/null
	fi
}

if [ "$SERVER_STOP" = "yes" ]; then
	postgres_shutdown
fi

if [ "$SERVER_START" = "yes" ]; then
	postgres_shutdown

	# Configure group parameters
	GROUPNAME=`groups $POSTGRES_USER | awk '{print $3}'`
	if [ "$GROUPNAME" = "" ]; then
		GROUPNAME=`groups $POSTGRES_USER`
	fi
	GROUPID=`grep ^$GROUPNAME: /etc/group | cut -d: -f3`
	echo $GROUPID > /proc/sys/vm/hugetlb_shm_group

	# Update the memory configurations
	TOTALBUFFER_SIZE=$(($EFFECTIVE_CACHESIZE+$WORK_MEM))
	update_entry_cnf work_mem $(($WORK_MEM/1048576))MB
	update_entry_cnf shared_buffers $((SHARED_BUFFERS/1048576))MB
	update_entry_cnf effective_cache_size $(($EFFECTIVE_CACHESIZE/1048576))MB

	# Do not checkpoint frequently
	# Checkpoints are in 16MB segments so this tuning is to checkpoint
	# when roughly quarter of the shared bufffers have been updated.
	update_entry_cnf checkpoint_segments $((SHARED_BUFFERS/1048576/4))
	update_entry_cnf synchronous_commit on

	# Configure shmem parameters
	echo $TOTALBUFFER_SIZE > /proc/sys/kernel/shmmax
	echo $(($TOTALBUFFER_SIZE*2/$PAGESIZE)) > /proc/sys/kernel/shmall
	ulimit -l $TOTALBUFFER_SIZE

	echo Starting postgres
	rm logfile 2> /dev/null
	$HUGECTL $PSQL "$SHELLPACK_INCLUDE/run_background bin/pg_ctl -D $POSTGRES_DATADIR -l logfile start"
	wait_on_pid_file $POSTGRES_PIDFILE
	POSTGRES_PID=`cat $POSTGRES_PIDFILE 2>&1`

	echo -n Waiting on postgres to accept commands
	$PSQL "$SHELLPACK_INCLUDE/run_background bin/pg_ctl -D $POSTGRES_DATADIR status"
	RETVAL=?
	while [ $RETVAL != 0 ]; do
		echo -n .
		RETVAL=$?
		sleep 1
	done
	echo
fi

echo postgres operation successful
exit $SHELLPACK_SUCCESS
#### Description Build and setup postgres
#### Details postgresbuild-bench 48
